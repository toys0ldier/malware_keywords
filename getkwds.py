#!/Users/Trevor/.local/share/virtualenvs/Projects-gzo9vKzn

import requests, time, pymongo, os, pathlib, subprocess
from datetime import datetime, timedelta

def connect():
    global db, mongo_client
    mongo_client = pymongo.MongoClient('mongodb://192.168.1.227:27017/')
    db = mongo_client.keywords

def update_index_start():
    _id = db['keyword_index'].insert_one({
        'start_date': datetime.now(),
        'objects_total': db['keyword_list'].count_documents({}),
        'objects_added': 0,
        'finish_date': '',
        'success': False
    })
    return _id.inserted_id
    
def update_index_end(_id, kwd_len):
    db['keyword_index'].update_one({
        '_id': _id
    },
    {
        '$set': {
            'objects_added': kwd_len,
            'finish_date': datetime.now(),
            'success': True
        }
    })
    
def get_names():
    api_key = open(os.path.join(pathlib.Path(__file__).parent.resolve(), 'MALSHARE'), 'r').read()
    response = requests.get(
        'https://malshare.com/api.php?api_key=%s&action=getfilenames' % api_key,
    ).json()
    return response

def update_db(kwds):
    for kwd in kwds:
        existing_entry = db['keyword_list'].count_documents({'keyword': kwd})
        if existing_entry:
            count_times = 0
            for n in db['keyword_list'].find({'keyword': kwd}):
                count_times = n['count_times']
            db['keyword_list'].update_one({
                'keyword': kwd
            },
            {
                '$set': {
                    'count_times': count_times + 1
                }
            })
        else:
            db['keyword_list'].insert_one({
                'keyword': kwd,
                'count_times': 1,
                'added_on': datetime.now(),
                'source': 'malware_bazaar',
                'active': True
            })
    
def push_kwds():
    '''
    
    logic to remove:
    
    1. invalid filenames
    2. keywords which appear less than 10 times
    3. keywords older than 30 days
    4. keywords containing user information (emails)
    
    '''
    avoid_chars = [
        '@',
        '..',
        'DMPDATA'
    ]
    mandatory_chars = [
        '.'
    ]
    with open(os.path.join(pathlib.Path(__file__).parent.resolve(), 'keywords_filenames_with_count.txt'), 'w', encoding='utf-8-sig') as f1:
        with open(os.path.join(pathlib.Path(__file__).parent.resolve(), 'keywords_filenames_only.txt'), 'w', encoding='utf-8-sig') as f2:
            for entry in db['keyword_list'].find().sort('count_times', -1):
                if any(m for m in mandatory_chars if(m in entry['keyword'])) and \
                    not any(a for a in avoid_chars if(a in entry['keyword'])) and \
                        not entry['keyword'].endswith('.') and \
                            not entry['keyword'].startswith('.') and \
                                entry['count_times'] > 10 and \
                                    entry['last_added'] > datetime.now() - timedelta(days=30):
                    f1.write(str(entry['count_times']) + ',' + entry['keyword'] + '\n')
                    f2.write(entry['keyword'] + '\n')

def get_new_kwds():
    _id = update_index_start()
    kwds = get_names()
    update_db(kwds)
    update_index_end(_id, len(kwds))
    
def push_updates():
    os.chdir(pathlib.Path(__file__).parent.resolve())
    subprocess.run(['git add keywords_filenames_only.txt'], shell=True)
    subprocess.run(['git add keywords_filenames_with_count.txt'], shell=True)
    subprocess.run(['git commit -m "keyword update"'], shell=True)
    subprocess.run(['git push -u origin main'], shell=True)

def main():
    connect()
    get_new_kwds()
    push_kwds()
    mongo_client.close()
    push_updates()

if __name__ == '__main__':
    
    main()